name: Sync GitHub Release to Gitee

on:
    workflow_dispatch:

jobs:
    sync:
        runs-on: ubuntu-latest
        env:
            GITEE_OWNER: iBenzene
            GITEE_REPO: TJUEcard
            GITEE_API: https://gitee.com/api/v5
        steps:
            - name: Checkout (not strictly needed)
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  fetch-tags: true

            - name: Prepare tools
              run: |
                  sudo apt-get update
                  sudo apt-get install -y jq curl

            - name: Capture context & download assets (latest release)
              id: ctx
              env:
                  GITHUB_REPOSITORY: ${{ github.repository }}
              shell: bash
              run: |
                  set -Eeuo pipefail

                  # 1) 拉取最新 release (含 assets)
                  RESP=$(
                    curl -fsSL \
                      -H 'Accept: application/vnd.github+json' \
                      -H 'User-Agent: release-sync-action' \
                      "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest"
                  )

                  # 2) 输出 JSON 给后续步骤使用
                  TAG=$(jq -r '.tag_name' <<<"$RESP")
                  NAME=$(jq -r '.name // empty' <<<"$RESP")
                  BODY=$(jq -r '.body // empty' <<<"$RESP")
                  echo "tag=$TAG"   >> "$GITHUB_OUTPUT"
                  echo "name=$NAME" >> "$GITHUB_OUTPUT"
                  echo "body=$(jq -Rn --arg s "$BODY" '$s')" >> "$GITHUB_OUTPUT"  # 已是合法 JSON 字符串

                  # 3) 下载所有资产 (保留原名)
                  mkdir -p assets
                  COUNT=$(jq -r '.assets|length' <<<"$RESP")
                  if [ "$COUNT" = "0" ] || [ -z "$COUNT" ]; then
                    echo "No assets found on release ${TAG}."
                    exit 0
                  fi

                  jq -r '.assets[] | [.name, .browser_download_url] | @tsv' <<<"$RESP" \
                  | while IFS=$'\t' read -r NAME URL; do
                      echo "Downloading ${NAME} ..."
                      curl -fL --retry 3 --retry-delay 2 -o "assets/${NAME}" "$URL"
                    done

                  # 如需额外同步源码包, 取消下面两行注释即可
                  # ZIPURL=$(jq -r '.zipball_url' <<<"$RESP"); [ -n "$ZIPURL" ] && curl -fL -o "assets/source-${TAG}.zip" "$ZIPURL"
                  # TARURL=$(jq -r '.tarball_url' <<<"$RESP"); [ -n "$TARURL" ] && curl -fL -o "assets/source-${TAG}.tar.gz" "$TARURL"

            - name: Ensure Tag & Release on Gitee (create if missing)
              id: gitee_release
              env:
                  GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
                  GITHUB_REPOSITORY: ${{ github.repository }}
              shell: bash
              run: |
                  set -euo pipefail

                  TAG='${{ steps.ctx.outputs.tag }}'
                  NAME='${{ steps.ctx.outputs.name }}'
                  BODY_JSON='${{ steps.ctx.outputs.body }}'   # 已是 JSON 字符串

                  if [ -z "$TAG" ] || [ "$TAG" = "null" ]; then
                    echo "ERROR: No tag found from GitHub latest release."
                    exit 1
                  fi

                  echo "Ensuring tag & release for '$TAG' on Gitee ($GITEE_OWNER/$GITEE_REPO) ..."

                  # 0) 解析 GitHub 上该 tag 的真实提交 SHA (优先使用本地 git, 失败则用 API 兜底)
                  set +e
                  SHA=$(git rev-list -n 1 "$TAG" 2>/dev/null)
                  set -e
                  if [ -z "${SHA:-}" ]; then
                      echo "Local git resolve failed for tag $TAG, fallback to GitHub API..."
                      REF_JSON=$(curl -fsSL \
                        -H 'Accept: application/vnd.github+json' \
                        -H 'User-Agent: release-sync-action' \
                        "https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/${TAG}")
                      TYPE=$(jq -r '.object.type // empty' <<<"$REF_JSON")
                      OBJ_SHA=$(jq -r '.object.sha // empty' <<<"$REF_JSON")
                      if [ "$TYPE" = "tag" ]; then
                          TAGOBJ=$(curl -fsSL \
                            -H 'Accept: application/vnd.github+json' \
                            -H 'User-Agent: release-sync-action' \
                            "https://api.github.com/repos/${GITHUB_REPOSITORY}/git/tags/${OBJ_SHA}")
                          SHA=$(jq -r '.object.sha // empty' <<<"$TAGOBJ")
                      else
                          SHA="$OBJ_SHA"
                      fi
                  fi

                  if [ -z "${SHA:-}" ] || [ "${SHA:-}" = "null" ]; then
                      echo "ERROR: cannot resolve commit SHA for tag $TAG from GitHub."
                      exit 1
                  fi
                  echo "Resolved GitHub tag $TAG -> commit $SHA"

                  # ---------- 若 release 已存在 (且 id 有效), 直接复用 ----------
                  set +e
                  RESP="$(curl -s -w '\n%{http_code}' \
                    "$GITEE_API/repos/$GITEE_OWNER/$GITEE_REPO/releases/tags/$TAG?access_token=$GITEE_TOKEN")"
                  set -e
                  BODY="$(sed '$d' <<<"$RESP")"
                  CODE="$(tail -n1 <<<"$RESP" | tr -d '\r')"

                  RID=""
                  if [ "$CODE" = "200" ]; then
                      if jq -e '.id != null' >/dev/null 2>&1 <<<"$BODY"; then
                          RID="$(jq -r '.id' <<<"$BODY")"
                          if [ "$RID" = "null" ] || [ -z "$RID" ]; then
                              RID=""
                          fi
                      fi
                  fi

                  if [ -n "$RID" ]; then
                      echo "Found existing release id: $RID"
                      echo "rid=$RID" >> "$GITHUB_OUTPUT"
                      exit 0
                  fi

                  echo "Release not found (or invalid). Will create release and tag (if missing) on Gitee."

                  # ---------- 规范化 NAME 与 BODY ----------
                  SAFE_NAME="$NAME"
                  if [ -z "$SAFE_NAME" ] || [ "$SAFE_NAME" = "null" ]; then
                      SAFE_NAME="$TAG"
                  fi
                  if [ -z "$BODY_JSON" ] || [ "$BODY_JSON" = "null" ]; then
                      BODY_JSON='""'
                  fi

                  # 关键：将 target_commitish 设为 GitHub 上该 tag 的提交 SHA
                  CREATE_PAYLOAD="$(jq -n \
                      --arg at   "$GITEE_TOKEN" \
                      --arg tag  "$TAG" \
                      --arg name "$SAFE_NAME" \
                      --arg tgt  "$SHA" \
                      --argjson body "$BODY_JSON" \
                      '{
                          access_token: $at,
                          tag_name: $tag,
                          name: $name,
                          body: $body,
                          target_commitish: $tgt
                      }'
                  )"

                  # ---------- 创建 release (若 tag 不存在, Gitee 将以 target_commitish=$SHA 创建同名 tag) ----------
                  CREATE_RESP="$(curl -sS -X POST \
                    -H 'Content-Type: application/json' \
                    -d "$CREATE_PAYLOAD" \
                    "$GITEE_API/repos/$GITEE_OWNER/$GITEE_REPO/releases")"

                  NEW_ID="$(jq -r '.id // empty' <<<"$CREATE_RESP")"
                  if [ -z "$NEW_ID" ]; then
                      echo "Failed to create release on Gitee."
                      echo "Request payload:"
                      echo "$CREATE_PAYLOAD"
                      echo "Response:"
                      echo "$CREATE_RESP"
                      exit 1
                  fi

                  echo "Created Gitee release id: $NEW_ID"
                  echo "rid=$NEW_ID" >> "$GITHUB_OUTPUT"

            # - name: Upload ALL assets to Gitee Release (keep names)
            #   env:
            #       GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
            #   shell: bash
            #   run: |
            #       set -euo pipefail
            #       RID='${{ steps.gitee_release.outputs.rid }}'

            #       if [ -z "$RID" ]; then
            #         echo "ERROR: No Gitee release id to upload assets."
            #         exit 1
            #       fi

            #       shopt -s nullglob
            #       FILES=(assets/*)
            #       if [ ${#FILES[@]} -eq 0 ]; then
            #         echo "No local assets to upload."
            #         exit 0
            #       fi

            #       for f in "${FILES[@]}"; do
            #         NAME=$(basename "$f")
            #         echo "Uploading $NAME to Gitee release $RID ..."
            #         RESP=$(curl -sS -X POST \
            #           "$GITEE_API/repos/$GITEE_OWNER/$GITEE_REPO/releases/$RID/assets?access_token=$GITEE_TOKEN&name=$(printf %s "$NAME" | jq -sRr @uri)" \
            #           -F "attachment=@$f")
            #         URL=$(jq -r '.browser_download_url // .download_url // empty' <<< "$RESP")
            #         if [ -z "$URL" ]; then
            #           echo "Upload failed for $NAME:"
            #           echo "$RESP"
            #           exit 1
            #         else
            #           echo "Uploaded: $URL"
            #         fi
            #       done
