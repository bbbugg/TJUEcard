name: Sync GitHub Release to Gitee

on:
    workflow_dispatch:

jobs:
    sync:
        runs-on: ubuntu-latest
        env:
            GITEE_OWNER: iBenzene
            GITEE_REPO: TJUEcard
            GITEE_API: https://gitee.com/api/v5
        steps:
            - name: Checkout (not strictly needed)
              uses: actions/checkout@v4

            - name: Prepare tools
              run: |
                  sudo apt-get update
                  sudo apt-get install -y jq curl

            - name: Capture context & download assets (latest release)
              id: ctx
              env:
                  GITHUB_REPOSITORY: ${{ github.repository }}
              shell: bash
              run: |
                  set -Eeuo pipefail

                  # 1) 拉取最新 release (含 assets)
                  RESP=$(
                    curl -fsSL \
                      -H 'Accept: application/vnd.github+json' \
                      -H 'User-Agent: release-sync-action' \
                      "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest"
                  )

                  # 2) 输出 JSON 给后续步骤使用
                  TAG=$(jq -r '.tag_name' <<<"$RESP")
                  NAME=$(jq -r '.name // empty' <<<"$RESP")
                  BODY=$(jq -r '.body // empty' <<<"$RESP")
                  echo "tag=$TAG"   >> "$GITHUB_OUTPUT"
                  echo "name=$NAME" >> "$GITHUB_OUTPUT"
                  echo "body=$(jq -Rn --arg s "$BODY" '$s')" >> "$GITHUB_OUTPUT"  # 已是合法 JSON 字符串

                  # 3) 下载所有资产 (保留原名)
                  mkdir -p assets
                  COUNT=$(jq -r '.assets|length' <<<"$RESP")
                  if [ "$COUNT" = "0" ] || [ -z "$COUNT" ]; then
                    echo "No assets found on release ${TAG}."
                    exit 0
                  fi

                  jq -r '.assets[] | [.name, .browser_download_url] | @tsv' <<<"$RESP" \
                  | while IFS=$'\t' read -r NAME URL; do
                      echo "Downloading ${NAME} ..."
                      curl -fL --retry 3 --retry-delay 2 -o "assets/${NAME}" "$URL"
                    done

                  # 如需额外同步源码包, 取消下面两行注释即可
                  # ZIPURL=$(jq -r '.zipball_url' <<<"$RESP"); [ -n "$ZIPURL" ] && curl -fL -o "assets/source-${TAG}.zip" "$ZIPURL"
                  # TARURL=$(jq -r '.tarball_url' <<<"$RESP"); [ -n "$TARURL" ] && curl -fL -o "assets/source-${TAG}.tar.gz" "$TARURL"

            - name: Ensure Release exists on Gitee (create if missing)
              id: gitee_release
              env:
                  GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
              shell: bash
              run: |
                  set -euo pipefail

                  TAG='${{ steps.ctx.outputs.tag }}'
                  NAME='${{ steps.ctx.outputs.name }}'
                  # BODY_JSON 为 JSON 字符串 (已转义好的文本, 例如 "line1\nline2")
                  BODY_JSON='${{ steps.ctx.outputs.body }}'

                  echo "Ensuring release for tag '$TAG' on Gitee ($GITEE_OWNER/$GITEE_REPO) ..."

                  # ---------- 尝试获取已存在的 release (按 tag) ----------
                  set +e
                  RESP="$(curl -s -w '\n%{http_code}' \
                    "$GITEE_API/repos/$GITEE_OWNER/$GITEE_REPO/releases/tags/$TAG?access_token=$GITEE_TOKEN")"
                  set -e
                  BODY="$(sed '$d' <<<"$RESP")"
                  CODE="$(tail -n1 <<<"$RESP" | tr -d '\r')"

                  # 有些情况下 Gitee 可能返回 200 但 id 为 null, 这里要同时校验 HTTP 码与 id 字段有效性
                  RID=""
                  if [ "$CODE" = "200" ]; then
                      # 提取 id, 若为 null/缺失, 则视为未找到
                      if jq -e '.id != null' >/dev/null 2>&1 <<<"$BODY"; then
                          RID="$(jq -r '.id' <<<"$BODY")"
                          if [ "$RID" = "null" ] || [ -z "$RID" ]; then
                              RID=""
                          fi
                      fi
                  fi

                  if [ -n "$RID" ]; then
                      echo "Found existing release id: $RID"
                      echo "rid=$RID" >> "$GITHUB_OUTPUT"
                      exit 0
                  fi

                  echo "Release not found (or invalid) on Gitee, creating..."

                  # ---------- 获取 Gitee 仓库默认分支, 作为 target_commitish ----------
                  set +e
                  REPO_INFO="$(curl -s "$GITEE_API/repos/$GITEE_OWNER/$GITEE_REPO?access_token=$GITEE_TOKEN")"
                  set -e
                  TARGET_BRANCH="$(jq -r '.default_branch // empty' <<<"$REPO_INFO" || true)"
                  if [ -z "${TARGET_BRANCH:-}" ] || [ "${TARGET_BRANCH:-}" = "null" ]; then
                      # 尝试回退到 main, 再回退到 master
                      TARGET_BRANCH="main"
                      # 若需要, 你也可以在此处探测分支是否存在并回退为 master, 这里简单回退两级
                      #  (创建 release 时若 tag 不存在, Gitee 会基于该分支创建 tag)
                  fi

                  # ---------- 规范化 NAME 与 BODY ----------
                  # 若 name 为空, 则使用 tag 作为展示名, 避免 JSON 构造时出现空字段导致无效 JSON
                  SAFE_NAME="$NAME"
                  if [ -z "$SAFE_NAME" ] || [ "$SAFE_NAME" = "null" ]; then
                      SAFE_NAME="$TAG"
                  fi

                  # BODY_JSON 已是 JSON 字符串；若为空, 则置为 "" 的 JSON
                  if [ -z "$BODY_JSON" ] || [ "$BODY_JSON" = "null" ]; then
                      BODY_JSON='""'
                  fi

                  # ---------- 使用 jq 构造创建 release 的 JSON, 有效避免转义问题 ----------
                  CREATE_PAYLOAD="$(jq -n \
                      --arg at   "$GITEE_TOKEN" \
                      --arg tag  "$TAG" \
                      --arg name "$SAFE_NAME" \
                      --arg tgt  "$TARGET_BRANCH" \
                      --argjson body "$BODY_JSON" \
                      '{
                          access_token: $at,
                          tag_name: $tag,
                          name: $name,
                          body: $body,
                          target_commitish: $tgt
                      }'
                  )"

                  # ---------- 创建 release ----------
                  CREATE_RESP="$(curl -sS -X POST \
                    -H 'Content-Type: application/json' \
                    -d "$CREATE_PAYLOAD" \
                    "$GITEE_API/repos/$GITEE_OWNER/$GITEE_REPO/releases")"

                  NEW_ID="$(jq -r '.id // empty' <<<"$CREATE_RESP")"
                  if [ -z "$NEW_ID" ]; then
                      echo "Failed to create release on Gitee."
                      echo "Request payload:"
                      echo "$CREATE_PAYLOAD"
                      echo "Response:"
                      echo "$CREATE_RESP"
                      exit 1
                  fi

                  echo "Created Gitee release id: $NEW_ID"
                  echo "rid=$NEW_ID" >> "$GITHUB_OUTPUT"

            - name: Upload ALL assets to Gitee Release (keep names)
              env:
                  GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
              run: |
                  set -euo pipefail
                  RID='${{ steps.gitee_release.outputs.rid }}'

                  shopt -s nullglob
                  FILES=(assets/*)
                  if [ ${#FILES[@]} -eq 0 ]; then
                    echo "No local assets to upload."
                    exit 0
                  fi

                  for f in "${FILES[@]}"; do
                    NAME=$(basename "$f")
                    echo "Uploading $NAME to Gitee release $RID ..."
                    # Gitea/Gitee 接口使用 multipart/form-data 的 attachment 字段
                    # POST /repos/{owner}/{repo}/releases/{id}/assets?name=FILENAME
                    RESP=$(curl -sS -X POST \
                      "$GITEE_API/repos/$GITEE_OWNER/$GITEE_REPO/releases/$RID/assets?access_token=$GITEE_TOKEN&name=$(printf %s "$NAME" | jq -sRr @uri)" \
                      -F "attachment=@$f")
                    URL=$(jq -r '.browser_download_url // .download_url // empty' <<< "$RESP")
                    if [ -z "$URL" ]; then
                      echo "Upload failed for $NAME:"
                      echo "$RESP"
                      exit 1
                    else
                      echo "Uploaded: $URL"
                    fi
                  done