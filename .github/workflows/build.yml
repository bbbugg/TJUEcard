name: Build and Release Executables

# 触发条件：当在GitHub上创建新的Release时运行此工作流
on:
  release:
    types: [ created ]

jobs:
  build:
    # 定义任务名称
    name: Build for ${{ matrix.os }}

    # 使用矩阵策略，让任务在多个操作系统上并行运行
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ] # 同时在最新的Ubuntu和Windows上构建

    # 指定运行环境
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write

    steps:
      # 第一步：检出（下载）你的代码到虚拟环境中
      - name: Checkout code
        uses: actions/checkout@v4

      # 第二步：根据当前操作系统设置Python环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' # 您可以根据需要更改Python版本

      # 第三步：安装项目依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 第四步：使用PyInstaller打包两个脚本
      # 我们为 setup.py 使用控制台模式，为 main.py 使用无控制台模式
      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile setup.py
          pyinstaller --onefile --noconsole main.py

      # 第五步：上传构建好的可执行文件到Release
      # 使用新的官方action，分别上传两个文件
      - name: Upload setup executable
        uses: softprops/action-gh-release@v2
        with:
          files: ./dist/setup${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          name: setup-${{ matrix.os }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload main executable
        uses: softprops/action-gh-release@v2
        with:
          files: ./dist/main${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          name: main-${{ matrix.os }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
