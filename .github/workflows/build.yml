name: Build and Release Executables
run-name: Release ${{ github.ref_name }}
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    name: Build for ${{ matrix.desc }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # ----- Native Builds -----
          # ===== Linux =====
          - os: linux
            arch: x86_64
            runs_on: ubuntu-22.04
            py_arch: x64
            desc: linux-x86_64

          - os: linux
            arch: arm64
            runs_on: ubuntu-22.04-arm
            py_arch: arm64
            desc: linux-arm64

          # ===== Windows =====
          - os: windows
            arch: x86_64
            runs_on: windows-2022
            py_arch: x64
            desc: windows-x86_64

          # ===== macOS =====
          # macOS-13 为 Intel x86_64, macOS-14 为 Apple Silicon arm64
          - os: macos
            arch: x86_64
            runs_on: macos-13
            py_arch: x64
            desc: macos-x86_64

          - os: macos
            arch: arm64
            runs_on: macos-14
            py_arch: arm64
            desc: macos-arm64

          # ----- Emulated Builds (都运行在 ubuntu-22.04 x86_64 上) -----
          - os: linux
            arch: x86
            runs_on: ubuntu-22.04
            desc: linux-x86
            image: i386/debian:12
            platform: linux/386
          - os: linux
            arch: arm32
            runs_on: ubuntu-22.04
            desc: linux-arm32v7
            image: arm32v7/ubuntu:22.04
            platform: linux/arm/v7

    runs-on: ${{ matrix.runs_on }}

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ===================================================================
      #  分支 1: Native Builds (x86_64, arm64, windows, macos)
      # ===================================================================
      - name: Set up Python (Native)
        if: "!matrix.image" # 只在没有定义 matrix.image 的原生构建上运行
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          architecture: ${{ matrix.py_arch }}

      - name: Install dependencies (Native)
        if: "!matrix.image"
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller
        shell: bash

      - name: Build with PyInstaller (Native)
        if: "!matrix.image"
        run: |
          mkdir -p dist
          pyinstaller --onefile --name TJUEcardSetup setup.py
          pyinstaller --onefile --noconsole --name TJUEcard TJUEcard_main.py
        shell: bash

      # ===================================================================
      #  分支 2: Emulated Builds (x86, armv7)
      # ===================================================================
      - name: Set up QEMU
        if: "matrix.image"
        uses: docker/setup-qemu-action@v3

      - name: Build with PyInstaller (Emulated)
        if: "matrix.image"
        run: |
          # 根据 matrix.arch 的值, 决定 PIP_FLAG 的内容
          PIP_FLAG_VALUE=""
          if [ "${{ matrix.arch }}" = "x86" ]; then
            PIP_FLAG_VALUE="--break-system-packages"
          fi

          # 将 PIP_FLAG_VALUE 作为环境变量传入容器
          docker run --rm --privileged \
            --platform ${{ matrix.platform }} \
            -v "${{ github.workspace }}":/workspace \
            -w /workspace \
            -e PIP_FLAG="${PIP_FLAG_VALUE}" \
            ${{ matrix.image }} \
            sh -c ' \
              set -ex; \
              apt-get update; \
              apt-get install -y \
                python3 \
                python3-pip \
                git \
                build-essential \
                libffi-dev \
                python3-cryptography; \
              \
              ln -s /usr/bin/python3 /usr/bin/python || true; \
              \
              # 直接使用从外部传入的 PIP_FLAG 环境变量
              python -m pip install --upgrade pip ${PIP_FLAG}; \
              \
              if [ -f requirements.txt ]; then \
                if [ "${{ matrix.arch }}" = "x86" ]; then \
                  echo "==> i386 environment: Installing dependencies from requirements.txt, excluding cryptography"; \
                  grep -v "^cryptography" requirements.txt | xargs -r python -m pip install ${PIP_FLAG}; \
                else \
                  echo "==> armv7 environment: Installing all dependencies from requirements.txt"; \
                  python -m pip install -r requirements.txt ${PIP_FLAG}; \
                fi; \
              fi; \
              \
              pip install pyinstaller ${PIP_FLAG}; \
              \
              pyinstaller --onefile --name TJUEcardSetup setup.py; \
              pyinstaller --onefile --noconsole --name TJUEcard TJUEcard_main.py \
            '

      - name: Fix file ownership
        if: "matrix.image" # 只在 Emulated 构建后运行
        run: |
          # The files created inside the container are owned by root.
          # Change ownership to the current runner user to avoid permission errors.
          sudo chown -R "$(id -u):$(id -g)" .
        shell: bash
      # ============ 从这里开始, 所有分支的步骤合并 ============

      # ===== 验证架构 =====
      - name: Check binary arch (Linux)
        if: runner.os == 'Linux'
        run: |
          file "dist/TJUEcardSetup"
          file "dist/TJUEcard"
        shell: bash

      - name: Check binary arch (macOS)
        if: runner.os == 'macOS'
        run: |
          lipo -info "dist/TJUEcardSetup" || true
          lipo -info "dist/TJUEcard" || true
        shell: bash

      - name: Check binary arch (Windows)
        if: runner.os == 'Windows'
        run: |
          if (Get-Command dumpbin -ErrorAction SilentlyContinue) {
            dumpbin /headers "dist\TJUEcardSetup.exe" | Select-String -Pattern "machine"
            dumpbin /headers "dist\TJUEcard.exe" | Select-String -Pattern "machine"
          } else {
            Write-Host "dumpbin not found; skipping arch check."
          }
        shell: pwsh

      - name: Package (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          set -eux
          cd dist
          tar -czf "TJUEcard-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz" \
            "TJUEcardSetup" \
            "TJUEcard"
          ls -l "TJUEcard-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz"
        shell: bash

      - name: Package (Windows)
        if: runner.os == 'Windows'
        run: |
          Set-StrictMode -Version Latest
          Set-Location dist
          Compress-Archive -Path "TJUEcardSetup.exe","TJUEcard.exe" -DestinationPath "TJUEcard-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}.zip"
          Get-ChildItem "TJUEcard-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}.zip" | Format-List
        shell: pwsh

      # ===== 自定义 Release Body: Version 与 Released on 紧邻, Released on 与 Commits 之间空一行 =====
      - name: Build custom release body
        if: startsWith(github.ref, 'refs/tags/')
        id: notes
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const tag = context.ref.replace('refs/tags/', ''); // e.g. v0.1.1
            const displayTag = tag.replace(/^v/, '');          // e.g. 0.1.1

            // 简易 semver 解析 / 比较 (仅 x.y.z)
            function parseSemver(name) {
              const m = name.match(/^v?(\d+)\.(\d+)\.(\d+)$/);
              if (!m) return null;
              return { major: +m[1], minor: +m[2], patch: +m[3] };
            }
            function cmp(a, b) {
              if (a.major !== b.major) return a.major - b.major;
              if (a.minor !== b.minor) return a.minor - b.minor;
              return a.patch - b.patch;
            }

            const cur = parseSemver(tag);
            if (!cur) {
              core.warning(`Current tag ${tag} is not plain semver, fallback to release page link.`);
            }

            // 找出上一版 tag (小于当前且最大的) 
            let previous = null;
            if (cur) {
              try {
                const tags = await github.paginate(github.rest.repos.listTags, {
                  owner, repo, per_page: 100,
                });
                const candidates = [];
                for (const t of tags) {
                  const name = t.name;
                  if (name === tag) continue;
                  const v = parseSemver(name);
                  if (!v) continue;
                  if (cmp(v, cur) < 0) candidates.push({ name, v });
                }
                if (candidates.length) {
                  candidates.sort((a, b) => cmp(a.v, b.v));
                  previous = candidates[candidates.length - 1].name;
                }
              } catch (e) {
                core.warning(`listTags failed: ${e.message}`);
              }
            }

            // 比较链接 (无上一版则退回到当前 release 页) 
            const compareUrl = previous
              ? `https://github.com/${owner}/${repo}/compare/${previous}...${tag}`
              : `https://github.com/${owner}/${repo}/releases/tag/${tag}`;
            
            #            // 提交列表 (过滤 merge 提交) 
            #            let lines = [];
            #            if (previous) {
            #              try {
            #                const cmpRes = await github.rest.repos.compareCommitsWithBasehead({
            #                  owner, repo, basehead: `${previous}...${tag}`,
            #                });
            #                const commits = cmpRes.data.commits || [];
            #                const filtered = commits.filter(c => {
            #                  const isMergeByParents = (c.parents?.length || 1) > 1;
            #                  const isMergeByMsg = /^Merge( |:)/.test(c.commit.message || '');
            #                  return !isMergeByParents && !isMergeByMsg;
            #                });
            #                for (const c of filtered) {
            #                  const sha = (c.sha || '').slice(0, 7);
            #                  const msg = (c.commit?.message || '').split('\n')[0];
            #                  if (msg && sha) lines.push(`- ${sha} ${msg}`);
            #                }
            #              } catch (e) {
            #                core.warning(`compareCommits failed: ${e.message}`);
            #              }
            #            }

            // 日期 (YYYY-MM-DD) , 加粗, 使用小号字体；与标题紧邻一行
            const dateStr = new Date().toISOString().slice(0, 10);
            const dateLine = `<sub>Released on <strong>${dateStr}</strong></sub>`;

            // 标题为加粗可点击链接；与日期紧邻 (无空行) ；日期与 Commits 之间空一行
                    let body = `[**Version ${displayTag} Changelog**](${compareUrl})\n${dateLine}\n\n`;
            #            body += 'Commits:\n' + (lines.length ? lines.join('\n') : '- Initial release') + '\n';

            core.setOutput('body', body);

      - name: Write notes to file
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          printf "%s" "${{ steps.notes.outputs.body }}" > RELEASE_BODY.md

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: ${{ github.ref_name }}
          body_path: RELEASE_BODY.md
          files: |
            dist/TJUEcard-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}