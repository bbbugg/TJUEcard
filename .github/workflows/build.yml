name: Build and Release Executables

# 触发条件：当在GitHub上创建新的Release时运行此工作流
on:
  release:
    types: [ created ]

jobs:
  build:
    # 定义任务名称
    name: Build for ${{ matrix.os }}

    # 使用矩阵策略，让任务在多个操作系统上并行运行
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ] # 同时在最新的Ubuntu、Windows和macOS上构建

    # 指定运行环境
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write

    steps:
      # 第一步：检出（下载）你的代码到虚拟环境中
      - name: Checkout code
        uses: actions/checkout@v4

      # 第二步：根据当前操作系统设置Python环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12' # 您可以根据需要更改Python版本

      # 第三步：安装项目依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 第四步：使用PyInstaller打包两个脚本
      # 我们为 setup.py 使用控制台模式，为 main.py 使用无控制台模式
      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile --name TJUEcardSetup setup.py
          pyinstaller --onefile --noconsole --name TJUEcard main.py

      # 第五步：为不同操作系统的可执行文件重命名
      - name: Rename executables for release
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            mv dist/TJUEcardSetup dist/TJUEcardSetup-linux
            mv dist/TJUEcard dist/TJUEcard-linux
          elif [ "${{ runner.os }}" == "Windows" ]; then
            mv dist/TJUEcardSetup.exe dist/TJUEcardSetup-windows.exe
            mv dist/TJUEcard.exe dist/TJUEcard-windows.exe
          elif [ "${{ runner.os }}" == "macOS" ]; then
            mv dist/TJUEcardSetup dist/TJUEcardSetup-macos
            mv dist/TJUEcard dist/TJUEcard-macos
          fi
        shell: bash

      # 第六步：上传构建好的可执行文件到Release
      - name: Upload executables to Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/TJUEcardSetup-*
            dist/TJUEcard-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
